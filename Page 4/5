def GC_content(dna_list):
    count_GC=[]
    for i in range(len(dna_list)):
        dna_str=dna_list[i]
        count_GC.append(dna_str.count('G')+dna_str.count('C'))
    maxGC_num=max(count_GC)
    maxGC_index=count_GC.index(maxGC_num)
    perc_GC=((maxGC_num)/(len(dna_list[maxGC_index])))*100
    return(maxGC_index,perc_GC)
GC_content(["CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG","CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC","CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGGTGGAAT"])


def rna2codon(seq): 
       
    table = {"UUU":"F", "UUC":"F", "UUA":"L", "UUG":"L",
    "UCU":"S", "UCC":"s", "UCA":"S", "UCG":"S",
    "UAU":"Y", "UAC":"Y", "UAA":"STOP", "UAG":"STOP",
    "UGU":"C", "UGC":"C", "UGA":"STOP", "UGG":"W",
    "CUU":"L", "CUC":"L", "CUA":"L", "CUG":"L",
    "CCU":"P", "CCC":"P", "CCA":"P", "CCG":"P",
    "CAU":"H", "CAC":"H", "CAA":"Q", "CAG":"Q",
    "CGU":"R", "CGC":"R", "CGA":"R", "CGG":"R",
    "AUU":"I", "AUC":"I", "AUA":"I", "AUG":"M",
    "ACU":"T", "ACC":"T", "ACA":"T", "ACG":"T",
    "AAU":"N", "AAC":"N", "AAA":"K", "AAG":"K",
    "AGU":"S", "AGC":"S", "AGA":"R", "AGG":"R",
    "GUU":"V", "GUC":"V", "GUA":"V", "GUG":"V",
    "GCU":"A", "GCC":"A", "GCA":"A", "GCG":"A",
    "GAU":"D", "GAC":"D", "GAA":"E", "GAG":"E",
    "GGU":"G", "GGC":"G", "GGA":"G", "GGG":"G",}

    protein ="" 
    if len(seq)%3 == 0: 
        for i in range(0, len(seq), 3): 
            codon = seq[i:i + 3]
            if table[codon]!="STOP":
                    protein+= table[codon] 
    return protein 
 
print( rna2codon("AUGGCCAUGGCGCCCAGAACUGAGAUCAAUAGUACCCGUAUUAACGGGUGA"))




def locate_substring(dna_snippet,dna):
        indexes = [i for i in range(len(dna_snippet)) if dna_snippet.startswith(dna, i)] 
        return indexes

print(locate_substring("GATATATGCATATACTT","ATAT"))


def hamming_dist(dna1, dna2):
    count = 0 
    i = 0
    while(i < len(dna1)):
        if dna1[i] != dna2[i]:
            count += 1
        i += 1
    return count
a = 'GAGCCTACTAACGGGAT'
b = 'CATCGTAATGACGGCCT'        
print(hamming_dist(a,b))


def count_dom_phenotype(genotypes):
    return (genotypes[0]*2)+(genotypes[1]*2)+(genotypes[2]*2)+(genotypes[3]*1.5)+(genotypes[4]*1)+(genotypes[5]*0)
count_dom_phenotype([1, 0, 0, 1, 0, 1])
